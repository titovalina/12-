class Node:  # Класс для представления узла в цепочке шариков
    def __init__(self, color):  # Инициализирует новый узел связного списка
        self.color = color
        self.next = None


class BallChain:  # Класс, представляющий собой цепочку шариков, реализованную как связный список
    def __init__(self, balls):  # Инициализация цепочки шариков
        self.head = None
        self.build(balls)  # Создание цепочки из входных данных

    def build(self, balls):  # Создает цепочку шариков (связный список) из списка цветов
        for color in balls:
            # Создаем новый узел для каждого цвета шарика
            new_node = Node(color)
            if not self.head:  # Если цепочка пуста
                self.head = new_node
            else:  # Если цепочка не пуста
                current = self.head
                while current.next:
                    current = current.next
                current.next = new_node

    def process(self):  # Удаляет последовательности и возвращает общее количество удаленных шариков
        total_removed = 0  # Инициализируем счетчик удаленных шариков
        while True:
            # Удаляем последовательности из 3+ одинаковых шариков
            removed = self.remove()
            if removed == 0:
                break
            total_removed += removed
        return total_removed  # Возвращаем общее количество удаленных шариков

    def remove(self):  # Внутренний метод для поиска и удаления последовательностей из 3+ одинаковых шариков
        if not self.head:  # Если цепочка пуста
            return 0

        current = self.head  # Начинаем с начала цепочки
        previous = None  # Указатель на предыдущий узел
        removed = 0  # Инициализируем счетчик удаленных шариков в этой итерации

        while current:  # Пока не достигнем конца цепочки
            count = 1  # Счетчик текущей последовательности
            while current.next and current.color == current.next.color:
                # Пока есть следующий шарик и его цвет совпадает с текущим
                count += 1
                current = current.next

            if count >= 3:  # Если нашли последовательность из 3+ шариков
                # Удаляем последовательность
                if previous is None:
                    self.head = current.next
                else:
                    previous.next = current.next

                removed += count  # Добавляем количество удаленных шариков в счетчик

                # Возвращаемся к предыдущему узлу, чтобы продолжить поиск
                current = previous.next if previous else self.head
                continue

            previous = current
            current = current.next

        return removed  # Возвращаем количество удаленных шариков в этой итерации


def main():  # Основная функция для взаимодействия с пользователем
    print("Игра 'Шарики'")

    while True:
        try:
            user_input = input("Введите количество шариков и их цвета (разделенные пробелами): ").strip()
            if not user_input:
                print("Ошибка: необходимо ввести хотя бы одно число.")
                continue

            parts = list(map(int, user_input.split()))  # Разбиваем ввод на части и преобразуем в целые числа
            n = parts[0]  # Первый элемент - количество шариков
            if n != len(parts) - 1:
                print(f"Ошибка: количество введенных цветов не соответствует заявленному количеству шариков.")
                continue

            if n < 1 or n > 10 ** 5:
                print("Ошибка: количество шариков должно быть в диапазоне от 1 до 10^5.")
                continue

            balls = parts[1:]  # Остальные элементы - цвета шариков
            if any(ball < 0 or ball > 9 for ball in balls):
                print("Ошибка: цвета шариков должны быть в диапазоне от 0 до 9.")
                continue

            chain = BallChain(balls)  # Создаем цепочку шариков
            removed = chain.process()  # Обрабатываем цепочку и получаем количество удаленных шариков
            print(f"Результат: {removed}")

            another = input("Хотите проверить другую цепочку? (да/нет): ").lower()
            if another != 'да':
                break

        except ValueError:
            print("Ошибка: введите целые числа.")
        except Exception as e:
            print(f"Произошла непредвиденная ошибка: {e}. Попробуйте снова.")


if __name__ == "__main__":
    main()
